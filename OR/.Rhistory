}
basic.feasible.solutions_for <- function(A, b){
lst <- list()
x <- all.basic_solutions_for(A, b)
i <- 1
for (t in x) {
if (all(t >= 0)) {
lst[[i]] <- t
i <- i + 1
}
}
return(lst)
}
all.basic_solutions_apply <- function(A,b){
comb <- combn(c(1:ncol(A)), nrow(A))
return(apply(comb, 2, basic.solution, A=A, b=b))
}
basic.feasible.solutions_apply <- function(A,b){
x <- all.basic_solutions_apply(A, b)
return(x[, !apply(x, 2, function(x) sum( x < 0 ) >= 1)])
}
solveProblem_for <- function(A, b, c){
# Implement here (15 lines >)
lst <- basic.feasible.solutions_for(A, b)
return(lst)
zValues <- list()
optimalLst <- list()
maxVal <- 0
i <- 1
for (l in lst) {
v <- calculateObjectiveFun(l, c)
zValues[i] <- v
i <- i + 1
if (v >= maxVal) {
maxVal <- v
}
}
i <- 1
for (l in 1:length(lst)) {
if (zValues[l] == maxVal) {
optimalLst[i] <- lst[l]
i <- i + 1
}
}
optimalLst[i] <- maxVal
return(optimalLst)
}
solveProblem_for(A,b,c)
# The problem has only one optimal solution.
# $solutions
# $solutions[[1]]
# [1] 0.0000000 3.7142857 0.0000000 0.2857143
#
#
# $optimal.val
# [1] 16.57143
# Implement here.
A <- matrix(c(2, 1, 2, -1, 4, 2, 2, -1, 6, 1, 4, -1), nrow=4, byrow=TRUE)
b <- c(8, 10, 12)
c <- c(-2, -4, -3)
solveProblem_for(A, b, c)
# Implement here.
A <- matrix(c(2, 1, 2, -1, 0, 0, 4, 2, 2, 0, -1, 0, 6, 1, 4, 0, 0, -1), nrow=6, byrow=TRUE)
b <- c(8, 10, 12)
c <- c(-2, -4, -3)
solveProblem_for(A, b, c)
# Implement here.
A <- matrix(c(2, 1, 2, -1, 0, 0, 4, 2, 2, 0, -1, 0, 6, 1, 4, 0, 0, -1), nrow=6, byrow=TRUE)
b <- c(8, 10, 12)
c <- c(-2, -4, -3, 0, 0, 0)
solveProblem_for(A, b, c)
# Implement here.
A <- matrix(c(2, 1, 2, -1, 0, 0, 4, 2, 2, 0, -1, 0, 6, 1, 4, 0, 0, -1), nrow=3, byrow=TRUE)
b <- c(8, 10, 12)
c <- c(-2, -4, -3, 0, 0, 0)
solveProblem_for(A, b, c)
solveProblem_for <- function(A, b, c){
# Implement here (15 lines >)
lst <- basic.feasible.solutions_for(A, b)
return(lst)
zValues <- list()
optimalLst <- list()
maxVal <- 0
i <- 1
for (l in lst) {
v <- calculateObjectiveFun(l, c)
zValues[i] <- v
i <- i + 1
if (v >= maxVal) {
maxVal <- v
}
}
i <- 1
for (l in 1:length(lst)) {
if (zValues[l] == maxVal) {
optimalLst[i] <- lst[l]
i <- i + 1
}
}
optimalLst[i] <- maxVal
return(optimalLst)
}
solveProblem_for(A,b,c)
# The problem has only one optimal solution.
# $solutions
# $solutions[[1]]
# [1] 0.0000000 3.7142857 0.0000000 0.2857143
#
#
# $optimal.val
# [1] 16.57143
solveProblem_for <- function(A, b, c){
# Implement here (15 lines >)
lst <- basic.feasible.solutions_for(A, b)
return(lst)
zValues <- list()
optimalLst <- list()
maxVal <- 0
i <- 1
for (l in lst) {
v <- calculateObjectiveFun(l, c)
zValues[i] <- v
i <- i + 1
if (v >= maxVal) {
maxVal <- v
}
}
print(maxVal)
i <- 1
for (l in 1:length(lst)) {
if (zValues[l] == maxVal) {
optimalLst[i] <- lst[l]
i <- i + 1
}
}
optimalLst[i] <- maxVal
return(optimalLst)
}
solveProblem_for(A,b,c)
# The problem has only one optimal solution.
# $solutions
# $solutions[[1]]
# [1] 0.0000000 3.7142857 0.0000000 0.2857143
#
#
# $optimal.val
# [1] 16.57143
solveProblem_for <- function(A, b, c){
# Implement here (15 lines >)
lst <- basic.feasible.solutions_for(A, b)
return(lst)
zValues <- list()
optimalLst <- list()
maxVal <- 0
i <- 1
for (l in lst) {
v <- calculateObjectiveFun(l, c)
zValues[i] <- v
i <- i + 1
if (v >= maxVal) {
maxVal <- v
}
}
print(maxVal)
i <- 1
for (l in 1:length(lst)) {
if (zValues[l] == maxVal) {
optimalLst[i] <- lst[l]
i <- i + 1
}
}
optimalLst[i] <- maxVal
return(optimalLst)
}
solveProblem_for(A,b,c)
# The problem has only one optimal solution.
# $solutions
# $solutions[[1]]
# [1] 0.0000000 3.7142857 0.0000000 0.2857143
#
#
# $optimal.val
# [1] 16.57143
basic.solution <- function(A, b, column.ind.vector){
x <- double(ncol(A))
if(det(A[,column.ind.vector]) != 0){
x[column.ind.vector] <- solve(A[,column.ind.vector], b)
} else {
x <- rep(-1, times = ncol(A))
}
return(x)
}
all.basic_solutions_for <- function(A, b){
comb <- combn(c(1:ncol(A)), nrow(A))
lst <- list()
for (c in 1:ncol(comb)) {
lst[[c]] <- basic.solution(A, b, comb[, c])
}
return(lst)
}
basic.feasible.solutions_for <- function(A, b){
lst <- list()
x <- all.basic_solutions_for(A, b)
i <- 1
for (t in x) {
if (all(t >= 0)) {
lst[[i]] <- t
i <- i + 1
}
}
return(lst)
}
all.basic_solutions_apply <- function(A,b){
comb <- combn(c(1:ncol(A)), nrow(A))
return(apply(comb, 2, basic.solution, A=A, b=b))
}
basic.feasible.solutions_apply <- function(A,b){
x <- all.basic_solutions_apply(A, b)
return(x[, !apply(x, 2, function(x) sum( x < 0 ) >= 1)])
}
# Auxiliary function for evaluating the objective function with the
# solution provided (x).
calculateObjectiveFun <- function(x, funCoeff) {
val <- 0
for (i in 1:length(funCoeff)) {
val <- val + (x[i] * funCoeff[i])
}
return(val)
}
solveProblem_for <- function(A, b, c){
# Implement here (15 lines >)
lst <- basic.feasible.solutions_for(A, b)
zValues <- list()
optimalLst <- list()
maxVal <- 0
i <- 1
for (l in lst) {
v <- calculateObjectiveFun(l, c)
zValues[i] <- v
i <- i + 1
if (v >= maxVal) {
maxVal <- v
}
}
print(maxVal)
i <- 1
for (l in 1:length(lst)) {
if (zValues[l] == maxVal) {
optimalLst[i] <- lst[l]
i <- i + 1
}
}
optimalLst[i] <- maxVal
return(optimalLst)
}
solveProblem_for(A,b,c)
# The problem has only one optimal solution.
# $solutions
# $solutions[[1]]
# [1] 0.0000000 3.7142857 0.0000000 0.2857143
#
#
# $optimal.val
# [1] 16.57143
solveProblem_for <- function(A, b, c){
# Implement here (15 lines >)
lst <- basic.feasible.solutions_for(A, b)
zValues <- list()
optimalLst <- list()
maxVal <- 0
i <- 1
for (l in lst) {
v <- calculateObjectiveFun(l, c)
zValues[i] <- v
i <- i + 1
if (v >= maxVal) {
maxVal <- v
}
}
i <- 1
for (l in 1:length(lst)) {
if (zValues[l] == maxVal) {
optimalLst[i] <- lst[l]
i <- i + 1
}
}
optimalLst[i] <- maxVal
return(optimalLst)
}
solveProblem_for(A,b,c)
# The problem has only one optimal solution.
# $solutions
# $solutions[[1]]
# [1] 0.0000000 3.7142857 0.0000000 0.2857143
#
#
# $optimal.val
# [1] 16.57143
solveProblem_for <- function(A, b, c){
# Implement here (15 lines >)
lst <- basic.feasible.solutions_for(A, b)
zValues <- list()
optimalLst <- list()
maxVal <- 0
i <- 1
for (l in lst) {
v <- calculateObjectiveFun(l, c)
zValues[i] <- v
i <- i + 1
if (v > maxVal) {
maxVal <- v
}
}
i <- 1
for (l in 1:length(lst)) {
if (zValues[l] == maxVal) {
optimalLst[i] <- lst[l]
i <- i + 1
}
}
optimalLst[i] <- maxVal
return(optimalLst)
}
solveProblem_for(A,b,c)
# The problem has only one optimal solution.
# $solutions
# $solutions[[1]]
# [1] 0.0000000 3.7142857 0.0000000 0.2857143
#
#
# $optimal.val
# [1] 16.57143
solveProblem_for <- function(A, b, c){
# Implement here (15 lines >)
lst <- basic.feasible.solutions_for(A, b)
zValues <- list()
optimalLst <- list()
maxVal <- 0
i <- 1
for (l in lst) {
v <- calculateObjectiveFun(l, c)
print(v)
zValues[i] <- v
i <- i + 1
if (v > maxVal) {
maxVal <- v
}
}
i <- 1
for (l in 1:length(lst)) {
if (zValues[l] == maxVal) {
optimalLst[i] <- lst[l]
i <- i + 1
}
}
optimalLst[i] <- maxVal
return(optimalLst)
}
solveProblem_for(A,b,c)
# The problem has only one optimal solution.
# $solutions
# $solutions[[1]]
# [1] 0.0000000 3.7142857 0.0000000 0.2857143
#
#
# $optimal.val
# [1] 16.57143
solveProblem_for <- function(A, b, c){
# Implement here (15 lines >)
lst <- basic.feasible.solutions_for(A, b)
zValues <- list()
optimalLst <- list()
maxVal <- 0
i <- 1
for (l in lst) {
v <- calculateObjectiveFun(l, c)
zValues[i] <- v
i <- i + 1
if (v > maxVal) {
maxVal <- v
}
}
print(zValues)
i <- 1
for (l in 1:length(lst)) {
if (zValues[l] == maxVal) {
optimalLst[i] <- lst[l]
i <- i + 1
}
}
optimalLst[i] <- maxVal
return(optimalLst)
}
solveProblem_for(A,b,c)
# The problem has only one optimal solution.
# $solutions
# $solutions[[1]]
# [1] 0.0000000 3.7142857 0.0000000 0.2857143
#
#
# $optimal.val
# [1] 16.57143
solveProblem_for <- function(A, b, c){
# Implement here (15 lines >)
lst <- basic.feasible.solutions_for(A, b)
zValues <- list()
optimalLst <- list()
maxVal <- -Inf
i <- 1
for (l in lst) {
v <- calculateObjectiveFun(l, c)
zValues[i] <- v
i <- i + 1
if (v > maxVal) {
maxVal <- v
}
}
print(maxVal)
i <- 1
for (l in 1:length(lst)) {
if (zValues[l] == maxVal) {
optimalLst[i] <- lst[l]
i <- i + 1
}
}
optimalLst[i] <- maxVal
return(optimalLst)
}
solveProblem_for(A,b,c)
# The problem has only one optimal solution.
# $solutions
# $solutions[[1]]
# [1] 0.0000000 3.7142857 0.0000000 0.2857143
#
#
# $optimal.val
# [1] 16.57143
solveProblem_for <- function(A, b, c){
# Implement here (15 lines >)
lst <- basic.feasible.solutions_for(A, b)
zValues <- list()
optimalLst <- list()
maxVal <- -Inf
i <- 1
for (l in lst) {
v <- calculateObjectiveFun(l, c)
zValues[i] <- v
i <- i + 1
if (v > maxVal) {
maxVal <- v
}
}
i <- 1
for (l in 1:length(lst)) {
if (zValues[l] == maxVal) {
optimalLst[i] <- lst[l]
i <- i + 1
}
}
optimalLst[i] <- maxVal
return(optimalLst)
}
solveProblem_for(A,b,c)
# The problem has only one optimal solution.
# $solutions
# $solutions[[1]]
# [1] 0.0000000 3.7142857 0.0000000 0.2857143
#
#
# $optimal.val
# [1] 16.57143
# Implement here.
A <- matrix(c(2, 1, 2, -1, 0, 0, 4, 2, 2, 0, -1, 0, 6, 1, 4, 0, 0, -1), nrow=3, byrow=TRUE)
b <- c(8, 10, 12)
c <- c(-2, -4, -3, 0, 0, 0)
solveProblem_for(A, b, c)
solveProblem_for <- function(A, b, c){
# Implement here (15 lines >)
lst <- basic.feasible.solutions_for(A, b)
message("Number of feasible solutions: ")
message(length(lst))
zValues <- list()
optimalLst <- list()
maxVal <- -Inf
i <- 1
for (l in lst) {
v <- calculateObjectiveFun(l, c)
zValues[i] <- v
i <- i + 1
if (v > maxVal) {
maxVal <- v
}
}
i <- 1
for (l in 1:length(lst)) {
if (zValues[l] == maxVal) {
optimalLst[i] <- lst[l]
i <- i + 1
}
}
optimalLst[i] <- maxVal
return(optimalLst)
}
solveProblem_for(A,b,c)
# The problem has only one optimal solution.
# $solutions
# $solutions[[1]]
# [1] 0.0000000 3.7142857 0.0000000 0.2857143
#
#
# $optimal.val
# [1] 16.57143
